# Generated from lib/chapter3/tiny_rb_parser.rb with RBS::Inline

module Chapter3
  class TinyRbParser
    class Term
    end

    class TrueTerm < Term
    end

    class FalseTerm < Term
    end

    class IfTerm < Term
      attr_accessor cond: Term

      attr_accessor thn: Term

      attr_accessor els: Term

      # : (cond: Term, thn: Term, els: Term) -> void
      def initialize: (cond: Term, thn: Term, els: Term) -> void
    end

    class NumberTerm < Term
      attr_accessor n: Integer

      # : (n: Integer) -> void
      def initialize: (n: Integer) -> void
    end

    class AddTerm < Term
      attr_accessor left: Term

      attr_accessor right: Term

      # : (left: Term, right: Term) -> void
      def initialize: (left: Term, right: Term) -> void
    end

    class VarTerm < Term
      attr_accessor name: String

      # : (params: name: String) -> void
      def initialize: (name: untyped) -> untyped
    end

    class FuncTerm < Term
      attr_accessor params: Array[Param]

      attr_accessor body: Term

      # : (params: Array[Param], body: Term) -> void
      def initialize: (params: Array[Param], body: Term) -> void
    end

    class Param
      attr_accessor name: String

      attr_accessor type: typ

      # : (name: String, type: typ) -> void
      def initialize: (name: String, type: typ) -> void
    end

    class CallTerm < Term
      attr_accessor func: Term

      attr_accessor args: Array[Term]

      # : (func: Term, args: Array[Term]) -> void
      def initialize: (func: Term, args: Array[Term]) -> void
    end

    # : (untyped) -> Chapter3::typ
    def self.to_typ: (untyped) -> Chapter3::typ

    # : (Integer, Prism::ParseResult) -> { param_typs: Array[Chapter3::typ], return_typ: Chapter3::typ | nil }
    def self.type_def: (Integer, Prism::ParseResult) -> { param_typs: Array[Chapter3::typ], return_typ: Chapter3::typ | nil }

    # : (String) -> Term
    def self.parse: (String) -> Term

    # : (Prism::node, Prism::ParseResult) -> Term
    def self.term: (Prism::node, Prism::ParseResult) -> Term
  end
end

type Chapter3::typ = { tag: "Boolean" } | { tag: "Number" } | { tag: "Func", params: Array[{ name: String, type: Chapter3::typ }], retType: Chapter3::typ }
